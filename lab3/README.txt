Лабораторна 3 — Масиви та ООП (JS)

Мета роботи

- Закріпити роботу з масивами в JavaScript: сортування, агрегації, пошук максимумів, вставки елементів за умовами.
- Продемонструвати застосування ООП-підходу: проєктування класу, статичні методи для обробки колекцій, похідні властивості.

Постановка задач

1) Новини (масив):
- Сортування за автором (лексикографічно, локаль «uk»).
- Обчислення середньої довжини короткого повідомлення (`shortMsgLength`) по кожному автору.
- Пошук новини з максимальним `readDay1` та виведення її `id`.
- Додавання новини: якщо запис повний — додати на початок, якщо неповний — в кінець.
- Розрахунок оплати авторів за добу з різними тарифами залежно від часу публікації: 0.5 грн/символ з 10:00 до 18:00 (включно початок, виключно кінець інтервалу), інакше — 0.8 грн/символ.

2) Користувачі (ООП):
- Реалізувати клас `User` з полями: `surname`, `name`, `age`, `education`, `feedbackPurpose`, `date`, `time`, `gender`.
- Фільтрувати користувачів за місяцем звернення та точним часом (`HH:MM`).
- Знайти мінімальний вік та типову(і) освіту(и) для цього віку.
- Класифікувати у 3 категорії: жінки з вищою освітою; чоловіки без освіти; інші.
- Відсортувати за віком за спаданням та за алфавітом (прізвище, імʼя) при рівному віці.

Структура даних (див. `script.js`)

- Масив `news`: елементи мають поля `id`, `title`, `author`, `shortMsgLength`, `readDay1`, `readDay2`, `publishedAt` (`ISO`-рядок з датою та часом).
- Клас `User`: інкапсулює атрибути користувача; має геттер `month` (1–12) за полем `date`.
- Масив `users`: набір екземплярів `User` для прикладів обробки.

Опис реалізованих алгоритмів

- Сортування новин за автором: копія масиву та `localeCompare` з локаллю `uk` для стабільного алфавітного порядку.
- Середня довжина за автором: накопичення суми та кількості у `Map`, перетворення у звичайний обʼєкт зі значеннями, округленими до 2 знаків.
- Максимум `readDay1`: лінійний прохід `reduce` з порівнянням поля `readDay1`.
- Додавання запису: перевірка на повноту за переліком обовʼязкових ключів; повний — `unshift`, неповний — `push`.
- Розрахунок оплати: парсинг години з `publishedAt`, фіксація інтервалу [10:00, 18:00), застосування ставки та агрегація у `Map` з подальшим перетворенням і округленням.
- Фільтр користувачів: зіставлення місяця (`getMonth()+1`) та точного часу рядком.
- Мінімальний вік і типова освіта: пошук мінімуму, добір користувачів з цим віком, побудова множини типових освіт.
- Класифікація: лічильники для заданих категорій із нормалізацією значень освіти.
- Сортування користувачів: компаратор з пріоритетом віку (спадання), далі прізвище та імʼя за локаллю `uk`.

Приклади результатів (консоль)

- [Новини] Відсортовано за автором: масив обʼєктів { id, author, title }.
- [Новини] Середня довжина за автором: обʼєкт на кшталт { "Іваненко": 120.00, ... }.
- [Новини] ID з максимумом readDay1: число id запису з найбільшим readDay1.
- [Новини] Оплата за добу (грн): обʼєкт сумарних виплат { author: сума }.
- [Користувачі] Фільтр за місяцем і часом: перелік { surname, name, time }.
- [Користувачі] Мінімальний вік і типова(і) освіта: мінімальний вік і множина освіт.
- [Користувачі] Класифікація: лічильники категорій.
- [Користувачі] Сортування (вік ↓, алфавіт): перелік { surname, name, age }.

Інструкція з запуску

1) Відкрити `script.js` у середовищі, що підтримує JavaScript (браузерна консоль або Node.js ≥ 18).
2) Запустити файл та переглянути вивід у консолі.

Висновки

- Реалізовано повний цикл роботи з масивами: сортування, агрегації, пошук та вставки.
- Продемонстровано ООП-підхід для обробки колекції користувачів із чіткими статичними методами.
- Логіка відокремлена та читаєма; результати наочно виводяться у консоль.

